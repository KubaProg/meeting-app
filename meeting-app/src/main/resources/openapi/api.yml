openapi: 3.0.0
info:
  version: 1.0.0
  title: meeting-app
tags:
  - name: "User"
  - name: "Event"
  - name: "Profile"

paths:

  /api/v1/auth/login:
    post:
      summary: Log in user
      tags:
        - "User"
      operationId: logInByCredentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistered'


  /api/v1/users:
    get:
      summary: Getting all users
      tags:
        - "User"
      operationId: getAllUsers
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGet'
    post:
      summary: Add user
      tags:
        - "User"
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPost"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistered'

  /api/v1/users/{id}:
    put:
      summary: Put user by id
      tags:
        - "User"
      operationId: putUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPut"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'


    get:
      summary: Get user by ID
      tags:
        - "User"
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'

    delete:
      summary: Delete User by id
      tags:
        - "User"
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ""


  /api/v1/users/{userId}/profile:
    get:
      summary: get user profile information by user id
      tags:
        - "User"
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "succesfull response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileGet'

    patch:
      summary: Update user profile information
      tags:
        - "User"
      operationId: updateUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated profile data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfilePatch'
      responses:
        200:
          description: Profile updated successfully




  /api/v1/events:
    get:
      summary: Getting all events
      tags:
        - "Event"
      operationId: getAllEvents
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

    post:
      summary: Creating a new event
      tags:
        - "Event"
      operationId: createEvent
      requestBody:
        description: Event data to create a new event
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPost'
      responses:
        "201":
          description: Event created successfully


  /api/v1/events/{id}:
    get:
      summary: Get event by ID
      tags:
        - "Event"
      operationId: getEventById
      parameters:
        - name: id
          in: path
          description: ID of the event to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Event details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventGet'


components:
  schemas:
    User:
      description: User model
      type: object
      required:
        - id
        - username
        - password
        - firstName
        - lastName
        - phoneNumber
        - birthDate
        - nick
      properties:
        id:
          description: The id of user
          type: integer
          format: int64
          example: 123
        username:
          description: the user username
          type: string
          example: user1@usermail.com
        password:
          description: the user password
          type: string
          example: hardpassword
        firstName:
          description: the user firstname
          type: string
          example: name
        lastName:
          description: the user firstname
          type: string
          example: surname
        phoneNumber:
          description: the user phone number
          type: string
          example: 123456789
        birthDate:
          description: the user birth date
          type: string
          example: 01-01-2002
        nick:
          description: the user nick
          type: string
          example: johnnnny

    UserGet:
      description: User get model
      type: object
      required:
        - username
        - firstName
        - lastName
        - phoneNumber
        - birthDate
        - nick
      properties:
        username:
          description: the user username
          type: string
          example: user1@usermail.com
        firstName:
          description: the user firstname
          type: string
          example: name
        lastName:
          description: the user firstname
          type: string
          example: surname
        phoneNumber:
          description: the user phone number
          type: string
          example: 123456789
        birthDate:
          description: the user birth date
          type: string
          example: 01-01-2002
        nick:
          description: the user nick
          type: string
          example: johnnnny

    UserPost:
      description: User post model
      type: object
      required:
        - username
        - password
        - firstName
        - lastName
        - phoneNumber
        - role_ids
      properties:
        username:
          description: the user username
          type: string
          example: user1@usermail.com
        password:
          description: the user password
          type: string
          example: hardpassword
        firstName:
          description: the user firstname
          type: string
          example: name
        lastName:
          description: the user firstname
          type: string
          example: surname
        phoneNumber:
          description: the user phone number
          type: string
          example: 123456789
        role_ids:
          type: array
          items:
            type: integer
            format: int64
            example: 123

    UserRegistered:
      description: User with jwtToken model
      type: object
      required:
        - id
        - username
        - password
        - firstName
        - lastName
        - phoneNumber
        - role_ids
        - jwt_token
      properties:
        id:
          description: The id of user
          type: integer
          format: int64
          example: 123
        username:
          description: the user username
          type: string
          example: user1@usermail.com
        password:
          description: the user password
          type: string
          example: hardpassword
        firstName:
          description: the user firstname
          type: string
          example: name
        lastName:
          description: the user firstname
          type: string
          example: surname
        phoneNumber:
          description: the user phone number
          type: string
          example: 123456789
        role_ids:
          type: array
          items:
            type: integer
            format: int64
            example: 123
        jwtToken:
          type: string

    UserPut:
      description: User put model
      type: object
      required:
        - username
        - password
        - firstName
        - lastName
        - phoneNumber
        - role_ids
      properties:
        username:
          description: the user username
          type: string
          example: user1@usermail.com
        password:
          description: the user password
          type: string
          example: hardpassword
        firstName:
          description: the user firstname
          type: string
          example: name
        lastName:
          description: the user firstname
          type: string
          example: surname
        phoneNumber:
          description: the user phone number
          type: string
          example: 123456789
        role_ids:
          type: array
          items:
            type: integer
            format: int64
            example: 123

    UserLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    Event:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        date:
          type: string
        startTime:
          type: string
        endTime:
          type: string
        location:
          $ref: '#/components/schemas/Location'
      required:
        - id
        - name
        - date
        - startTime
        - endTime
        - location

    EventGet:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        date:
          type: string
        startTime:
          type: string
        endTime:
          type: string
        location:
          $ref: '#/components/schemas/Location'
      required:
        - name
        - date
        - startTime
        - location

    EventPost:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        date:
          type: string
        startTime:
          type: string
        endTime:
          type: string
        location:
          $ref: '#/components/schemas/Location'
      required:
        - name
        - date
        - startTime
        - location

    Location:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          address:
            type: string
          latitude:
            type: number
          longitude:
            type: number
        required:
          - id
          - name
          - address
          - latitude
          - longitude

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        events:
          type: array
          items:
            type: integer
            format: int64
            example: 123
      required:
        - id
        - name
        - description
        - events

    Profile:
      type: object
      properties:
        id:
          type: integer
        sex:
          type: string
        interests:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        job:
          type: string
        school:
          type: string
        description:
          type: string
        photo:
          type: string
          description: url address of photo
        city:
          type: string

    ProfilePatch:
      type: object
      properties:
        sex:
          type: string
        interests:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        job:
          type: string
        school:
          type: string
        description:
          type: string
        photo:
          type: string
          description: url address of photo
        city:
          type: string



    ProfileGet:
      description: user get model
      type: object
      properties:
        sex:
          type: string
        interests:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        job:
          type: string
        school:
          type: string
        description:
          type: string
        photo:
          type: string
          description: url address of photo
        city:
          type: string